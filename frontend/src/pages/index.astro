---
import Layout from "../layouts/Layout.astro";

const s3Url = import.meta.env.PUBLIC_S3_URL || "{{ PUBLIC_S3_URL }}";
const ApiUrl = import.meta.env.PUBLIC_API_URL || "{{ PUBLIC_API_URL }}";
---

<Layout title="SUS.">
  <main>
    <svg
      class="cloud"
      xmlns="http://www.w3.org/2000/svg"
      width="512"
      height="512"
      viewBox="0 0 512 512"
    >
      <path
        fill="#222"
        stroke="#666"
        d="M398.1 233.2c0-1.2.2-2.4.2-3.6 0-65-51.8-117.6-115.7-117.6-46.1 0-85.7 27.4-104.3 67-8.1-4.1-17.2-6.5-26.8-6.5-29.5 0-54.1 21.9-58.8 50.5C57.3 235.2 32 269.1 32 309c0 50.2 40.1 91 89.5 91H224v-80h-48.2l80.2-83.7 80.2 83.6H288v80h110.3c45.2 0 81.7-37.5 81.7-83.4 0-45.9-36.7-83.2-81.9-83.3z"
      ></path>
    </svg>
    <h1>Simple <span class="text-gradient">Upload</span> Service</h1>
    <p class="instructions">
      This page allows you to upload any file to <code>{s3Url}</code>
      without any credentials.<br />
      <strong>Drag and Drop</strong> any file you want to upload!
    </p>
    <form>
      <input type="file" id="myFile" name="filename" />
      <button id="uploadButton">Upload ⬆️</button>
    </form>
  </main>
</Layout>

<script>
  const myFile: HTMLInputElement = document.getElementById(
    "myFile"
  ) as HTMLInputElement;
  const uploadButton: HTMLButtonElement = document.getElementById(
    "uploadButton"
  ) as HTMLButtonElement;
  function dropHandler(ev: DragEvent) {
    console.log("File(s) dropped");

    // Prevent default behavior (Prevent file from being opened)
    ev.preventDefault();
    myFile.files = ev.dataTransfer.files;

    if (ev.dataTransfer.items) {
      // Use DataTransferItemList interface to access the file(s)
      [...ev.dataTransfer.items].forEach((item, i) => {
        // If dropped items aren't files, reject them
        if (item.kind === "file") {
          const file = item.getAsFile();
          console.log(`… file[${i}].name = ${file.name}`);
        }
      });
    } else {
      // Use DataTransfer interface to access the file(s)
      [...ev.dataTransfer.files].forEach((file, i) => {
        console.log(`… file[${i}].name = ${file.name}`);
      });
    }
  }
  function dragOverHandler(ev: Event) {
    console.log("File(s) in drop zone");

    // Prevent default behavior (Prevent file from being opened)
    ev.preventDefault();
  }

  window.addEventListener(
    "dragover",
    function (e: DragEvent) {
      e.preventDefault();
    },
    false
  );
  window.addEventListener(
    "drop",
    function (e: DragEvent) {
      e.preventDefault();
    },
    false
  );

  window.addEventListener("drop", dropHandler);
  window.addEventListener("dragover", dragOverHandler);
  function uploadHandler(ev: Event) {
    ev.preventDefault();
    let files = myFile.files;
    let fileNames: string[] = [];
    for (let i = 0; i < myFile.files.length; i++) {
      fileNames.push(files.item(i).name);
    }
    console.log(
      fetch(`${import.meta.env.PUBLIC_API_URL}/presign`, {
        body: JSON.stringify({
          filenames: fileNames,
        }),
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      })
    );
  }
  uploadButton.addEventListener("click", uploadHandler);
</script>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .cloud {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
</style>
