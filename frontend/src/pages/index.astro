---
import Layout from "../layouts/Layout.astro";

const s3Url = import.meta.env.PUBLIC_S3_URL || "{{ PUBLIC_S3_URL }}";
---

<Layout title="SUS.">
  <main>
    <svg
      class="cloud"
      xmlns="http://www.w3.org/2000/svg"
      width="512"
      height="512"
      viewBox="0 0 512 512"
    >
      <path
        fill="#222"
        stroke="#666"
        d="M398.1 233.2c0-1.2.2-2.4.2-3.6 0-65-51.8-117.6-115.7-117.6-46.1 0-85.7 27.4-104.3 67-8.1-4.1-17.2-6.5-26.8-6.5-29.5 0-54.1 21.9-58.8 50.5C57.3 235.2 32 269.1 32 309c0 50.2 40.1 91 89.5 91H224v-80h-48.2l80.2-83.7 80.2 83.6H288v80h110.3c45.2 0 81.7-37.5 81.7-83.4 0-45.9-36.7-83.2-81.9-83.3z"
      ></path>
    </svg>
    <h1>Simple <span class="text-gradient">Upload</span> Service</h1>
    <p class="instructions">
      This page allows you to upload any files to <code>{s3Url}</code>
      without any credentials.
    </p>
    <ul class="files" id="filesList">
      <p style="text-align: center; margin: 0;">
        <strong>Drag and Drop</strong> any files you want to upload!
      </p>
    </ul>
    <form>
      <input type="file" id="myFile" name="filename" multiple hidden />
      <button id="chooseFiles">Choose Files üìÅ</button>
      <button id="uploadButton" style="float: right">Upload ‚¨ÜÔ∏è</button>
    </form>
    <div id="drop-modal" hidden>
      <svg
        class="modal-cloud"
        xmlns="http://www.w3.org/2000/svg"
        width="512"
        height="512"
        viewBox="0 0 512 512"
      >
        <path
          fill="#222"
          stroke="#666"
          d="M398.1 233.2c0-1.2.2-2.4.2-3.6 0-65-51.8-117.6-115.7-117.6-46.1 0-85.7 27.4-104.3 67-8.1-4.1-17.2-6.5-26.8-6.5-29.5 0-54.1 21.9-58.8 50.5C57.3 235.2 32 269.1 32 309c0 50.2 40.1 91 89.5 91H224v-80h-48.2l80.2-83.7 80.2 83.6H288v80h110.3c45.2 0 81.7-37.5 81.7-83.4 0-45.9-36.7-83.2-81.9-83.3z"
        ></path>
      </svg>
    </div>
  </main>
</Layout>

<script>
  import axios from "axios";
  const myFile: HTMLInputElement = document.getElementById(
    "myFile"
  ) as HTMLInputElement;
  const chooseFiles: HTMLButtonElement = document.getElementById(
    "chooseFiles"
  ) as HTMLButtonElement;
  const uploadButton: HTMLButtonElement = document.getElementById(
    "uploadButton"
  ) as HTMLButtonElement;
  const filesList: HTMLUListElement = document.getElementById(
    "filesList"
  ) as HTMLUListElement;
  const dropModal: HTMLDivElement = document.getElementById(
    "drop-modal"
  ) as HTMLDivElement;
  chooseFiles.addEventListener("click", (ev: Event) => {
    ev.preventDefault();
    myFile.click();
  });
  function addFileHandler() {
    const files = myFile.files;
    filesList.innerHTML = "";
    for (let i = 0; i < myFile.files.length; i++) {
      const file = files.item(i);
      filesList.innerHTML += `<li style="list-style: none; width: 100%;">${file.name} <progress id="progress-${file.name}" style="float: right" hidden max="100" value="0">0%</progress></li>`;
    }
  }
  myFile.addEventListener("change", addFileHandler);
  function dropHandler(ev: DragEvent) {
    dropModal.hidden = true;
    console.log("File(s) dropped");
    myFile.files = ev.dataTransfer.files;
    addFileHandler()
  }

  window.addEventListener(
    "dragover",
    function (e: DragEvent) {
      e.preventDefault();
      dropModal.hidden = false;
    },
    false
  );
  document.body.addEventListener(
    "dragleave",
    function (e: DragEvent) {
      e.preventDefault();
      if (e.x == 0 && e.y == 0) {
        dropModal.hidden = true;
      }
    },
    false
  );
  window.addEventListener(
    "drop",
    function (e: DragEvent) {
      e.preventDefault();
    },
    false
  );

  window.addEventListener("drop", dropHandler);
  async function uploadHandler(ev: Event) {
    ev.preventDefault();
    let files = myFile.files;
    interface PresignFiles {
      size: number;
      name: string;
      type: string;
    }
    let presignFiles: PresignFiles[] = [];
    for (let i = 0; i < myFile.files.length; i++) {
      const file = files.item(i);
      presignFiles.push({
        name: file.name,
        size: file.size,
        type: file.type,
      });
      document.getElementById(`progress-${file.name}`).hidden = false;
    }
    const request = fetch(`${import.meta.env.PUBLIC_API_URL}/presign`, {
      body: JSON.stringify({
        files: presignFiles,
      }),
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    });
    const response = await request;
    const data: Map<string, string> = await response.json();
    for (let i = 0; i < myFile.files.length; i++) {
      const file = files.item(i);
      const filename = file.name;
      const presignedUrl = data[filename];
      const progressElement = document.getElementById(
        `progress-${file.name}`
      ) as HTMLProgressElement;
      axios
        .put(presignedUrl, file, {
          onUploadProgress: (progressEvent) => {
            const { loaded, total } = progressEvent;
            let percentage = Math.floor((loaded * 100) / total);
            progressElement.value = percentage;
            progressElement.innerText = `${percentage}%`;
          },
          headers: {
            "Content-Type": file.type,
          },
        })
        .then(() => {
          progressElement.replaceWith("‚úÖ");
        });
    }
  }
  uploadButton.addEventListener("click", uploadHandler);
</script>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  #drop-modal {
    z-index: 100;
    position: absolute;
    top: 0;
    left: 0;
    width: calc(100vw - 40px);
    height: calc(100vh - 40px);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark))
    );
    margin: 20px;
    border-radius: 8px;
  }
  .modal-cloud {
    position: absolute;
    top: 50vh;
    left: 50%;
    transform: translatex(-50%) translateY(-50%);
    width: 80%;
  }
  .cloud {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .files {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-dark), 25%);
    background: linear-gradient(
      rgba(var(--accent-light), 66%),
      rgba(var(--accent-light), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  button {
    background-color: rgba(var(--accent-dark), 25%);
    border: 1px solid rgba(var(--accent-light), 25%);
    border-radius: 8px;
    box-sizing: border-box;
    color: #ffffff;
    cursor: pointer;
    height: 40px;
    padding: 10px 16px;
  }

  button:hover,
  button:focus {
    background-color: rgba(var(--accent-dark), 66%);
  }
</style>
